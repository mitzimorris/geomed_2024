---
title: "Implementing the BYM2 Model in Stan"
format:
  html:
    css: theming/quarto_styles.css 
    syntax-definitions:
      - theming/stan.xml
    embed-resources: true
    toc: true
    toc-location: left
    grid:
      body-width: 1000px
execute:
  eval: false
  keep-ipynb: true
---

## Notebook Setup

Import all libraries, load the NYC study data.

**Python**
```{python}
# import all libraries used in this notebook
import os
import numpy as np
import pandas as pd
import geopandas as gpd
import libpysal as sa
import matplotlib
import splot as splt
from splot.libpysal import plot_spatial_weights 
import plotnine as p9
import arviz as az
%matplotlib inline

from cmdstanpy import CmdStanModel, cmdstan_path, cmdstan_version

# suppress plotnine warnings
import warnings
warnings.filterwarnings('ignore')

# setup plotnine look and feel
p9.theme_set(
  p9.theme_grey() + 
  p9.theme(text=p9.element_text(size=10),
        plot_title=p9.element_text(size=14),
        axis_title_x=p9.element_text(size=12),
        axis_title_y=p9.element_text(size=12),
        axis_text_x=p9.element_text(size=8),
        axis_text_y=p9.element_text(size=8)
       )
)
xlabels_90 = p9.theme(axis_text_x = p9.element_text(angle=90, hjust=1))

map_theme =  p9.theme(figure_size=(7,6),
                 axis_text_x=p9.element_blank(),
                 axis_ticks_x=p9.element_blank(),
                 axis_text_y=p9.element_blank(),
                 axis_ticks_y=p9.element_blank())
```
```{python}
nyc_geodata = gpd.read_file(os.path.join('data', 'nyc_study.geojson'))
nyc_geodata.columns
```

**R**
```{r}
library(sf)
library(spdep) |> suppressPackageStartupMessages()
library(ggplot2)
library(tidyverse) |> suppressPackageStartupMessages()
library(cmdstanr)
library(posterior)
library(bayesplot)
library(loo)
library(parallel)
library(igraph)
cores = floor(parallel::detectCores() / 2)


# helper function:  create edgelist for ICAR component
nbs_to_adjlist <- function(nb) {
    adj_matrix = nb2mat(nb,style="B")
    t(as_edgelist(graph_from_adjacency_matrix(adj_matrix, mode="undirected")))
}
```

```{r}
nyc_geodata = st_read("data/nyc_study.geojson")
names(nyc_geodata)
```

## Disconnected Components (and islands)

New York city consists of several islands; only the Bronx is part of the mainland; Brooklyn and Queens are part of Long Island, plus smaller islands City Island, Roosevelt Island, and the Rockaways.

*This is a problem for the ICAR model, which operates on a fully connected graph (single component)*

* For the NYC analysis paper, we hand edited the map of NYC (in R) to create a fully connected network graph.

* For this notebook, we will restrict out attention to Brooklyn, the largest borough in NYC, which is a single network component.


**Python**
```{python}
brooklyn_geodata = nyc_geodata[nyc_geodata['BoroName']=='Brooklyn'].reset_index(drop=True)
brooklyn_nbs = sa.weights.Rook.from_dataframe(brooklyn_geodata, geom_col='geometry')
plot_spatial_weights(brooklyn_nbs, brooklyn_geodata) 
```

```{python}
print(f'number of components: {brooklyn_nbs.n_components}')
print(f'islands? {brooklyn_nbs.islands}')
print(f'max number of neighbors per node: {brooklyn_nbs.max_neighbors}')
print(f'mean number of neighbors per node: {brooklyn_nbs.mean_neighbors}')
```


**R**
```{r}
brooklyn_geodata = nyc_geodata[nyc_geodata$BoroName=='Brooklyn', ]
brooklyn_nbs = poly2nb(brooklyn_geodata, queen=FALSE)
brooklyn_coords = st_coordinates(st_centroid(brooklyn_geodata['geometry']))
plot(st_geometry(brooklyn_geodata), col='skyblue')
plot(brooklyn_nbs, coords=brooklyn_coords, add=TRUE, pch=20, cex=0.6)
```

```{r}
summary(brooklyn_nbs)
```


## From ICAR to BYM2

* Combines both ICAR component $\phi$ and ordinary random effects $\theta$ as
$$\left( (\sqrt{\, {\rho} / s}\, \ )\,\phi^* + (\sqrt{1-\rho})\,\theta^* \right) \sigma $$

* Parameter $\rho$ answers the question:  how much of the observed variance is spatial?

* Don't need to run analysis, e.g. Moran's I - the model sorts it out for you.

## BYM2 Model:  `bym2.stan`

This file is in directory `stan/bym2.stan`.

**Python**
```{python}
bym2_model_file = os.path.join('stan', 'bym2.stan')

with open(bym2_model_file, 'r') as file:
    contents = file.read()
    print(contents)
```

**R**
```{r}
bym2_model_file = file.path('stan', 'bym2.stan')
cat(readLines(bym2_model_file), sep="\n")
```



## Data Prep

### Get edgeset

- Compute this automatically from `nyc_geodata` spatial geometry component
  + Python package `libpysal`
  + R package `spdep`

**Python**
```{python}
brooklyn_nbs_adj =  brooklyn_nbs.to_adjlist(remove_symmetric=True)
print(type(brooklyn_nbs_adj))
brooklyn_nbs_adj.head(10)
```
```{python}
# create np.ndarray from columns in adjlist, increment indices by 1
j1 = brooklyn_nbs_adj['focal'] + 1
j2 = brooklyn_nbs_adj['neighbor'] + 1
edge_pairs = np.vstack([j1, j2])
edge_pairs
```

**R**
```{r}
brooklyn_nbs_adj = nbs_to_adjlist(brooklyn_nbs)
brooklyn_nbs_adj[1:2, 1:10]
```

### Compute scaling factor `tau`

Computed in R:  value 0.658

#### Assemble the input data 

**Python**
```{python}
design_vars = np.array(['pct_pubtransit','med_hh_inc', 'traffic', 'frag_index'])

design_mat = brooklyn_geodata[design_vars].to_numpy()
design_mat[:, 1] = np.log(design_mat[:, 1])
design_mat[:, 2] = np.log(design_mat[:, 2])

pd.DataFrame(data=design_mat).describe()
```

```{python}
bym2_data = {"N":brooklyn_geodata.shape[0],
             "y":brooklyn_geodata['count'].astype('int'),
             "E":brooklyn_geodata['kid_pop'].astype('int'),
             "K":4,
             "xs":design_mat,
             "N_edges": edge_pairs.shape[1],
             "neighbors": edge_pairs,
	     "tau":0.7
}
```

**R**
```{r}
design_mat <- as.data.frame(brooklyn_geodata) %>%
  select(pct_pubtransit, med_hh_inc, traffic, frag_index) %>%
  mutate(med_hh_inc = log(med_hh_inc),
         traffic = log(traffic))
summary(design_mat)
```

```{r}
bym2_data <- list(
  N = nrow(brooklyn_geodata),
  y = as.integer(brooklyn_geodata$count),
  E = as.integer(brooklyn_geodata$kid_pop),
  K = 4,
  xs = design_mat,
  N_edges = ncol(brooklyn_nbs_adj),
  neighbors = brooklyn_nbs_adj,
  tau = 0.658
)
```

## Fitting the ICAR Model on the Brooklyn data

#### Model is compiled (as needed) on instantiation 

**Python**
```{python}
bym2_mod = CmdStanModel(stan_file=bym2_model_file)
```


**R**
```{r}
bym2_mod = cmdstan_model(stan_file=bym2_model_file)
```

#### Run the NUTS-HMC sampler, summarize results

**Python**
```{python}
bym2_fit = bym2_mod.sample(data=bym2_data)
bym2_fit.summary().round(2).loc[
  ['beta_intercept', 'beta0', 'betas[1]', 'betas[2]', 'betas[3]', 'betas[4]', 'sigma']]
```


**R**
```{r}
bym2_fit = bym2_mod$sample(data=bym2_data, parallel_chains=cores)
bym2_fit 
```


## Model Comparison: BYM2 vs ICAR vs. ordinary random effects


#### ICAR model

**Python**
```{python}
pois_icar_mod = CmdStanModel(stan_file=os.path.join(
  'stan', 'poisson_icar.stan'))
pois_icar_fit = pois_icar_mod.sample(data=bym2_data)
pois_icar_fit.summary().round(2).loc[
  ['beta_intercept', 'beta0', 'betas[1]', 'betas[2]', 'betas[3]', 'betas[4]', 'sigma']]
```

**R**
```{r}
pois_icar_mod = cmdstan_model(stan_file=file.path(
  'stan', 'poisson_icar.stan')) 
pois_icar_fit = pois_icar_mod$sample(data=bym2_data, parallel_chains=cores)
pois_icar_fit 
```

#### Ordinary random effects model

**Python**
```{python}
pois_re_mod = CmdStanModel(stan_file=os.path.join(
  'stan', 'poisson_re.stan'))
pois_re_fit = pois_re_mod.sample(data=bym2_data)
pois_re_fit.summary().round(2).loc[
  ['beta_intercept', 'beta0', 'betas[1]', 'betas[2]', 'betas[3]', 'betas[4]', 'sigma']]
```

**R**
```{r}
pois_re_mod = cmdstan_model(stan_file=file.path(
  'stan', 'poisson_re.stan')) 
pois_re_fit = pois_re_mod$sample(data=bym2_data, parallel_chains=cores)
pois_re_fit 
```

Which model provides a better fit (on the Brooklyn subset of the data)?

### Visual comparison

#### BYM2 model

**Python**
```{python}
idata_bym2 = az.from_cmdstanpy(
    bym2_fit,
    posterior_predictive="y_rep",
    dims={"betas": ["covariates"]},
    coords={"covariates": design_vars},
    observed_data={"y": bym2_data['y']}
)
idata_bym2

az_bym2 = az.plot_ppc(idata_bym2, data_pairs={"y":"y_rep"})
az_bym2[0,0].title.text = "BYM2 model posterior predictive check"
az.plots.backends.show_layout(az_bym2)
```

**R**
```{r}
y_rep <- as_draws_matrix(bym2_fit$draws("y_rep"))
ppc_dens_overlay(brooklyn_geodata$count, y_rep) +
                 ggtitle("Posterior Predictive Check: BYM2 model")
```


#### ICAR model

**Python**
```{python}
idata_pois_icar = az.from_cmdstanpy(
    pois_icar_fit,
    posterior_predictive="y_rep",
    dims={"betas": ["covariates"]},
    coords={"covariates": design_vars},
    observed_data={"y": pois_icar_data['y']}
)
idata_pois_icar

az_pois_icar = az.plot_ppc(idata_pois_icar, data_pairs={"y":"y_rep"})
az_pois_icar[0,0].title.text = "Poisson ICAR model posterior predictive check"
az.plots.backends.show_layout(az_pois_icar)
```

**R**
```{r}
y_rep <- as_draws_matrix(pois_icar_fit$draws("y_rep"))
ppc_dens_overlay(brooklyn_geodata$count, y_rep) +
                 ggtitle("Posterior Predictive Check: Poisson ICAR model")
```

#### RE model

**Python**
```{python}
idata_pois_re = az.from_cmdstanpy(
    pois_re_fit,
    posterior_predictive="y_rep",
    dims={"betas": ["covariates"]},
    coords={"covariates": design_vars},
    observed_data={"y": pois_icar_data['y']}
)
az_pois_re = az.plot_ppc(idata_pois_re, data_pairs={"y":"y_rep"})
az_pois_re[0,0].title.text = "Poisson RE model posterior predictive check"
az.plots.backends.show_layout(az_pois_re)
```

**R**
```{r}
y_rep <- as_draws_matrix(pois_re_fit$draws("y_rep"))
ppc_dens_overlay(brooklyn_geodata$count, y_rep) +
                 ggtitle("Posterior Predictive Check: Poisson RE model")
```

### Leave-one-out cross-validation (LOO)

**Python**
```{python}
az.compare({"bym2":idata_bym2, "poisson_icar":idata_pois_icar, "poisson_re":idata_pois_re})
```

**R**
```{r}
loo_bym2 <- loo(bym2_fit$draws("log_lik"), save_psis = TRUE)
loo_icar_pois <- loo(pois_icar_fit$draws("log_lik"), save_psis = TRUE)
loo_re_pois <- loo(pois_re_fit$draws("log_lik"), save_psis = TRUE)

loo_compare(loo_bym2, loo_icar_pois, loo_re_pois)
```
